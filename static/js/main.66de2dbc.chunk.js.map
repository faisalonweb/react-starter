{"version":3,"sources":["logo.svg","actions/types.js","components/Post.js","actions/postAction.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","reportWebVitals.js","index.js"],"names":["FETCH_POSTS","NEW_POSTS","Posts","this","props","fetchPosts","nextProps","newPost","posts","unshift","postitems","map","post","title","body","id","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","Postform","onChange","bind","onSubmit","e","setState","target","name","value","preventDefault","createPosts","postData","console","log","method","headers","JSON","stringify","intialState","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","className","Post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.66de2dbc.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","export const FETCH_POSTS = 'FETCH_POSTS';\nexport const NEW_POSTS = 'NEW_POSTS';","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPosts } from '../actions/postAction';\n\n\nclass Posts extends Component {\n    componentWillMount() {\n        this.props.fetchPosts();\n    }\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.newPost) {\n          this.props.posts.unshift(nextProps.newPost)\n        }\n    }\n    render() {\n        //console.log(postitems);\n        const postitems = this.props.posts.map(post => (\n            \n            <div key={post.id}>\n                <h3>{post.title}</h3>\n                <p>{post.body}</p>\n            </div>\n        ));  \n        return (\n            <div>\n                <h1>Posts</h1>\n                {\n                    postitems\n                }\n            </div>\n        );\n    }\n}\n\nPosts.propTypes = {\n    fetchPosts: PropTypes.func.isRequired,\n    posts: PropTypes.array.isRequired,\n    newPost:PropTypes.object\n}\n\nconst mapStateToProps = state => ({\n    posts : state.posts.items,\n    newPost: state.posts.item \n});\n\nexport default connect(mapStateToProps,{fetchPosts})(Posts);","import { FETCH_POSTS,NEW_POSTS} from './types';\n\n\nexport const fetchPosts = () => dispatch => {\n    \n        fetch('https://jsonplaceholder.typicode.com/posts')\n        .then(res => res.json())\n        .then(posts => dispatch({\n          type: FETCH_POSTS,\n          payload:posts\n        }))\n    \n}\nexport const createPosts = (postData) => dispatch => {\n    console.log('cation called');\n    fetch('https://jsonplaceholder.typicode.com/posts',{\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(postData)\n        })\n        .then(res => res.json())\n        .then(post => dispatch({\n            type: NEW_POSTS,\n            payload:post\n          }))\n\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { createPosts } from '../actions/postAction';\n\nclass Postform extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          title: '',\n          body: ''\n\n        }\n        this.onChange = this.onChange.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n    onChange(e) {\n        this.setState({[e.target.name]: e.target.value})\n    }\n    onSubmit(e) {\n        e.preventDefault();\n\n        const post = {\n\n            title: this.state.title,\n            body: this.state.body\n        }\n       \n    this.props.createPosts(post);       \n\n    }\n    render() {\n        return (\n            <div>\n                <h1>Add Posts</h1>\n                <form onSubmit={this.onSubmit}>\n                    <div>\n                        <label>Title: </label><br />\n                        <input type=\"text\" name=\"title\" onChange={this.onChange} value={this.state.title}/>\n                    </div>\n                    <div>\n                        <label>Body: </label><br />\n                        <textarea name=\"body\" onChange={this.onChange} value={this.state.body}/>\n                    </div>\n                    <br />\n                    <button type=\"submit\">Submit</button>\n                </form>\n            </div>\n        );\n    }\n}\nPostform.propTypes = {\n    createPosts: PropTypes.func.isRequired,\n    \n}\n//export default Postform;\nexport default connect(null,{ createPosts })(Postform);","import { FETCH_POSTS,NEW_POSTS} from '../actions/types';\n\nconst intialState = {\n    item: {},\n    items: []\n};\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default function(state = intialState, action) {\n\n    switch(action.type) {\n        case FETCH_POSTS:\n            return {\n                ...state,\n                items: action.payload\n            };\n        case NEW_POSTS:   \n        return {\n            ...state,\n            item: action.payload\n        };        \n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux';\nimport postReducer from './postReducer';\n\n\nexport default combineReducers({\n posts: postReducer\n});","import { createStore,applyMiddleware,compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\nconst intialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    intialState,\n    compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n    );\n\nexport default store;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Posts from './components/Post';\nimport Postform from './components/Postform';\nimport {Provider} from 'react-redux';\nimport store from './store';\n\n\n\n\nclass App extends Component {\n  render() {\n  return (\n    <Provider store={store}>\n    <div className=\"App\">\n      <Postform />\n      <hr />\n      <Posts />\n    </div>\n    </Provider>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}